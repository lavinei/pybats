# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"dglm": "00_dglm.ipynb",
         "bern_dglm": "00_dglm.ipynb",
         "pois_dglm": "00_dglm.ipynb",
         "dlm": "00_dglm.ipynb",
         "bin_dglm": "00_dglm.ipynb",
         "update_F": "01_update.ipynb",
         "update": "01_update.ipynb",
         "update_dlm": "01_update.ipynb",
         "update_bindglm": "01_update.ipynb",
         "forecast_aR": "02_forecast.ipynb",
         "forecast_R_cov": "02_forecast.ipynb",
         "forecast_marginal": "02_forecast.ipynb",
         "forecast_marginal_bindglm": "02_forecast.ipynb",
         "forecast_state_mean_and_var": "02_forecast.ipynb",
         "forecast_path": "02_forecast.ipynb",
         "forecast_path_copula": "02_forecast.ipynb",
         "forecast_path_dlm": "02_forecast.ipynb",
         "forecast_path_copula_sim": "02_forecast.ipynb",
         "forecast_path_copula_density_MC": "02_forecast.ipynb",
         "forecast_joint_copula_sim": "02_forecast.ipynb",
         "forecast_joint_copula_density_MC": "02_forecast.ipynb",
         "multivariate_t": "02_forecast.ipynb",
         "multivariate_t_density": "02_forecast.ipynb",
         "forecast_marginal_density_MC": "02_forecast.ipynb",
         "define_dglm": "03_define_models.ipynb",
         "define_dlm_params": "03_define_models.ipynb",
         "define_bern_params": "03_define_models.ipynb",
         "define_bin_params": "03_define_models.ipynb",
         "define_pois_params": "03_define_models.ipynb",
         "ncol": "03_define_models.ipynb",
         "fill_diag": "03_define_models.ipynb",
         "define_dcmm": "03_define_models.ipynb",
         "define_dbcm": "03_define_models.ipynb",
         "define_dlmm": "03_define_models.ipynb",
         "seascomp": "04_seasonal.ipynb",
         "createFourierToSeasonalL": "04_seasonal.ipynb",
         "fourierToSeasonal": "04_seasonal.ipynb",
         "fourierToSeasonalFxnl": "04_seasonal.ipynb",
         "get_seasonal_effect_fxnl": "04_seasonal.ipynb",
         "sample_seasonal_effect_fxnl": "04_seasonal.ipynb",
         "forecast_weekly_seasonal_factor": "04_seasonal.ipynb",
         "forecast_path_weekly_seasonal_factor": "04_seasonal.ipynb",
         "analysis": "05_analysis.ipynb",
         "analysis_dcmm": "05_analysis.ipynb",
         "analysis_dbcm": "05_analysis.ipynb",
         "analysis_dlmm": "05_analysis.ipynb",
         "beta_approx": "06_conjugates.ipynb",
         "gamma_approx": "06_conjugates.ipynb",
         "gamma_alpha_approx": "06_conjugates.ipynb",
         "pois_alpha_param": "06_conjugates.ipynb",
         "gamma_solver": "06_conjugates.ipynb",
         "beta_solver": "06_conjugates.ipynb",
         "conj_params": "06_conjugates.ipynb",
         "bern_conjugate_params": "06_conjugates.ipynb",
         "pois_conjugate_params": "06_conjugates.ipynb",
         "bin_conjugate_params": "06_conjugates.ipynb",
         "mean": "07_point_forecast.ipynb",
         "median": "07_point_forecast.ipynb",
         "weighted_quantile": "07_point_forecast.ipynb",
         "m_one_median": "07_point_forecast.ipynb",
         "joint_m_one_median": "07_point_forecast.ipynb",
         "constrained_mean": "07_point_forecast.ipynb",
         "constrained_median": "07_point_forecast.ipynb",
         "constrained_joint_m_one_median": "07_point_forecast.ipynb",
         "zape_point_estimate": "07_point_forecast.ipynb",
         "MSE": "08_loss_functions.ipynb",
         "MAD": "08_loss_functions.ipynb",
         "MAPE": "08_loss_functions.ipynb",
         "WAPE": "08_loss_functions.ipynb",
         "WAFE": "08_loss_functions.ipynb",
         "ZAPE": "08_loss_functions.ipynb",
         "scaledMSE": "08_loss_functions.ipynb",
         "ax_style": "09_plot.ipynb",
         "plot_data_forecast": "09_plot.ipynb",
         "plot_coef": "09_plot.ipynb",
         "plot_corr": "09_plot.ipynb",
         "load_interpolators": "10_shared.ipynb",
         "transformer": "10_shared.ipynb",
         "gamma_transformer": "10_shared.ipynb",
         "trigamma": "10_shared.ipynb",
         "save": "10_shared.ipynb",
         "load": "10_shared.ipynb",
         "define_holiday_regressors": "10_shared.ipynb",
         "load_standard_holidays": "10_shared.ipynb",
         "cov2corr": "10_shared.ipynb",
         "load_sales_example": "10_shared.ipynb",
         "load_sales_example2": "10_shared.ipynb",
         "load_dcmm_latent_factor_example": "10_shared.ipynb",
         "load_dbcm_latent_factor_example": "10_shared.ipynb",
         "load_dlmm_example": "10_shared.ipynb",
         "load_us_inflation": "10_shared.ipynb",
         "load_us_inflation_forecasts": "10_shared.ipynb",
         "dcmm": "11_dcmm.ipynb",
         "dbcm": "12_dbcm.ipynb",
         "latent_factor": "13_latent_factor.ipynb",
         "multi_latent_factor": "13_latent_factor.ipynb",
         "Y_fxn": "13_latent_factor.ipynb",
         "Y_forecast_fxn": "13_latent_factor.ipynb",
         "Y_lf": "13_latent_factor.ipynb",
         "Y_update_via_forecast_fxn": "13_latent_factor.ipynb",
         "Y_forecast_lf": "13_latent_factor.ipynb",
         "seas_weekly_fxn": "13_latent_factor.ipynb",
         "seas_weekly_forecast_fxn": "13_latent_factor.ipynb",
         "seas_weekly_lf": "13_latent_factor.ipynb",
         "hol_fxn": "13_latent_factor.ipynb",
         "hol_forecast_fxn": "13_latent_factor.ipynb",
         "hol_lf": "13_latent_factor.ipynb",
         "pois_coef_fxn": "13_latent_factor.ipynb",
         "pois_coef_forecast_fxn": "13_latent_factor.ipynb",
         "pois_coef_lf": "13_latent_factor.ipynb",
         "bern_coef_fxn": "13_latent_factor.ipynb",
         "bern_coef_forecast_fxn": "13_latent_factor.ipynb",
         "bern_coef_lf": "13_latent_factor.ipynb",
         "dlm_coef_fxn": "13_latent_factor.ipynb",
         "dlm_coef_forecast_fxn": "13_latent_factor.ipynb",
         "dlm_coef_lf": "13_latent_factor.ipynb",
         "dlm_dof_fxn": "13_latent_factor.ipynb",
         "dlm_dof_forecast_fxn": "13_latent_factor.ipynb",
         "dlm_dof_lf": "13_latent_factor.ipynb",
         "copy_fxn": "13_latent_factor.ipynb",
         "copy_forecast_fxn": "13_latent_factor.ipynb",
         "merge_fxn": "13_latent_factor.ipynb",
         "merge_forecast_fxn": "13_latent_factor.ipynb",
         "merge_latent_factors": "13_latent_factor.ipynb",
         "merge_lf_with_predictor": "13_latent_factor.ipynb",
         "pct_chg_from_lf_avg": "13_latent_factor.ipynb",
         "forecast_holiday_effect_dlm": "13_latent_factor.ipynb",
         "update_F_lf": "14_latent_factor_fxns.ipynb",
         "update_lf_analytic": "14_latent_factor_fxns.ipynb",
         "update_lf_analytic_dlm": "14_latent_factor_fxns.ipynb",
         "get_mean_and_var_lf": "14_latent_factor_fxns.ipynb",
         "get_mean_and_var_lf_dlm": "14_latent_factor_fxns.ipynb",
         "forecast_marginal_lf_analytic": "14_latent_factor_fxns.ipynb",
         "forecast_path_lf_copula": "14_latent_factor_fxns.ipynb",
         "update_lf_sample": "14_latent_factor_fxns.ipynb",
         "update_lf_sample_forwardfilt": "14_latent_factor_fxns.ipynb",
         "forecast_marginal_lf_sample": "14_latent_factor_fxns.ipynb",
         "lf_simulate_from_sample": "14_latent_factor_fxns.ipynb",
         "forecast_path_lf_sample": "14_latent_factor_fxns.ipynb",
         "forecast_joint_marginal_lf_copula": "14_latent_factor_fxns.ipynb",
         "forecast_joint_marginal_lf_copula_dcmm": "14_latent_factor_fxns.ipynb",
         "forecast_marginal_lf_dcmm": "14_latent_factor_fxns.ipynb",
         "forecast_path_lf_dcmm": "14_latent_factor_fxns.ipynb",
         "dlmm": "15_dlmm.ipynb"}

modules = ["dglm.py",
           "update.py",
           "forecast.py",
           "define_models.py",
           "seasonal.py",
           "analysis.py",
           "conjugates.py",
           "point_forecast.py",
           "loss_functions.py",
           "plot.py",
           "shared.py",
           "dcmm.py",
           "dbcm.py",
           "latent_factor.py",
           "latent_factor_fxns.py",
           "dlmm.py"]

doc_url = "https://lavinei.github.io/pybats/"

git_url = "https://github.com/lavinei/pybats/tree/master/"

def custom_doc_links(name): return None
